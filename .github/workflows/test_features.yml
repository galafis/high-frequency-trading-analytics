name: Feature Engineering Pipeline Tests

# Trigger the workflow on push, pull request, or manual dispatch
on:
  push:
    branches: [main, develop]
    paths:
      - 'features.py'
      - 'tests/test_features.py'
      - 'requirements.txt'
      - '.github/workflows/test_features.yml'
      - 'validate_data.py'
      - 'data/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'features.py'
      - 'tests/test_features.py'
      - 'requirements.txt'
      - '.github/workflows/test_features.yml'
      - 'validate_data.py'
      - 'data/**'
  workflow_dispatch:  # Allow manual triggering

# Define environment variables
env:
  PYTHON_VERSION: '3.9'
  COVERAGE_THRESHOLD: 80

jobs:
  # Data validation job - runs before all other tests
  validate-data-schema:
    name: Validate Data Schema
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Python environment
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Create/recreate test data safely
    - name: Setup test data
      run: |
        mkdir -p data/test
        python validate_data.py --create-test-data
      env:
        PYTHONPATH: .
    
    # Validate data schema
    - name: Validate data schema
      run: |
        python validate_data.py --validate-schema
      env:
        PYTHONPATH: .
  
  # Feature engineering tests
  test-features:
    name: Test Feature Engineering
    runs-on: ubuntu-latest
    needs: validate-data-schema
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    # Create test data
    - name: Setup test data
      run: |
        mkdir -p data/test
        python validate_data.py --create-test-data
      env:
        PYTHONPATH: .
    
    # Run tests with coverage
    - name: Run feature tests with coverage
      run: |
        pytest tests/test_features.py -v --cov=features --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
    
    # Upload coverage to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: features
        name: codecov-umbrella
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    # Upload test artifacts
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          pytest.xml
          data/test/
        retention-days: 7
  
  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate-data-schema, test-features]
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Python environment
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-integration
    
    # Setup test environment
    - name: Setup test data
      run: |
        mkdir -p data/test data/processed
        python validate_data.py --create-test-data
      env:
        PYTHONPATH: .
    
    # Run integration tests
    - name: Run integration tests
      run: |
        pytest tests/ -k "integration" -v --tb=short
      env:
        PYTHONPATH: .
    
    # Upload integration test results
    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          data/processed/
          logs/
        retention-days: 3
  
  # Coverage enforcement
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test-features
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Python environment
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
    
    # Setup test data
    - name: Setup test data
      run: |
        mkdir -p data/test
        python validate_data.py --create-test-data
      env:
        PYTHONPATH: .
    
    # Run coverage check
    - name: Run coverage check
      run: |
        pytest tests/test_features.py --cov=features --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}
      env:
        PYTHONPATH: .
    
    # Generate coverage report
    - name: Generate coverage report
      run: |
        coverage report --show-missing
        coverage html
    
    # Upload coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7
